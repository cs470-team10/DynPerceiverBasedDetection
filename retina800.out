[CS470] Start Time: 2024.04.04 13:48:17 (KST)
04/04 04:48:18 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1361756192
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: None
    GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 1.12.1+cu116
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1+cu116
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1361756192
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

04/04 04:48:18 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/coco/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'models/retinanet_regnetx-800MF_fpn_1x_coco_20200517_191403-f6f91d10.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        arch='regnetx_800mf',
        frozen_stages=1,
        init_cfg=dict(
            checkpoint='open-mmlab://regnetx_800mf', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='RegNet'),
    bbox_head=dict(
        anchor_generator=dict(
            octave_base_scale=4,
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales_per_octave=3,
            strides=[
                8,
                16,
                32,
                64,
                128,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            type='FocalLoss',
            use_sigmoid=True),
        num_classes=80,
        stacked_convs=4,
        type='RetinaHead'),
    data_preprocessor=dict(
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        pad_size_divisor=32,
        std=[
            57.375,
            57.12,
            58.395,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        add_extra_convs='on_input',
        in_channels=[
            64,
            128,
            288,
            672,
        ],
        num_outs=5,
        out_channels=256,
        start_level=1,
        type='FPN'),
    test_cfg=dict(
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.5, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(
            ignore_iof_thr=-1,
            min_pos_iou=0,
            neg_iou_thr=0.4,
            pos_iou_thr=0.5,
            type='MaxIoUAssigner'),
        debug=False,
        pos_weight=-1,
        sampler=dict(type='PseudoSampler')),
    type='RetinaNet')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=5e-05),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        ann_file='annotations/instances_train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/retinanet_regnetx-800MF_fpn_1x_coco'

04/04 04:48:30 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
04/04 04:48:30 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
loading annotations into memory...
Done (t=2.05s)
creating index...
index created!
loading annotations into memory...
Done (t=0.72s)
creating index...
index created!
Loads checkpoint by local backend from path: models/retinanet_regnetx-800MF_fpn_1x_coco_20200517_191403-f6f91d10.pth
04/04 04:48:36 - mmengine - INFO - Load checkpoint from models/retinanet_regnetx-800MF_fpn_1x_coco_20200517_191403-f6f91d10.pth
04/04 04:49:00 - mmengine - INFO - Epoch(test) [  50/5000]    eta: 0:38:57  time: 0.4723  data_time: 0.0161  memory: 275  
04/04 04:49:03 - mmengine - INFO - Epoch(test) [ 100/5000]    eta: 0:21:28  time: 0.0538  data_time: 0.0062  memory: 271  
04/04 04:49:05 - mmengine - INFO - Epoch(test) [ 150/5000]    eta: 0:15:24  time: 0.0461  data_time: 0.0038  memory: 275  
04/04 04:49:07 - mmengine - INFO - Epoch(test) [ 200/5000]    eta: 0:12:23  time: 0.0473  data_time: 0.0034  memory: 268  
04/04 04:49:10 - mmengine - INFO - Epoch(test) [ 250/5000]    eta: 0:10:31  time: 0.0452  data_time: 0.0031  memory: 271  
04/04 04:49:12 - mmengine - INFO - Epoch(test) [ 300/5000]    eta: 0:09:14  time: 0.0431  data_time: 0.0028  memory: 271  
04/04 04:49:14 - mmengine - INFO - Epoch(test) [ 350/5000]    eta: 0:08:19  time: 0.0437  data_time: 0.0029  memory: 265  
04/04 04:49:16 - mmengine - INFO - Epoch(test) [ 400/5000]    eta: 0:07:38  time: 0.0463  data_time: 0.0044  memory: 275  
04/04 04:49:19 - mmengine - INFO - Epoch(test) [ 450/5000]    eta: 0:07:06  time: 0.0463  data_time: 0.0033  memory: 265  
04/04 04:49:21 - mmengine - INFO - Epoch(test) [ 500/5000]    eta: 0:06:43  time: 0.0532  data_time: 0.0039  memory: 271  
04/04 04:49:23 - mmengine - INFO - Epoch(test) [ 550/5000]    eta: 0:06:21  time: 0.0451  data_time: 0.0029  memory: 275  
04/04 04:49:26 - mmengine - INFO - Epoch(test) [ 600/5000]    eta: 0:06:01  time: 0.0434  data_time: 0.0028  memory: 275  
04/04 04:49:28 - mmengine - INFO - Epoch(test) [ 650/5000]    eta: 0:05:44  time: 0.0438  data_time: 0.0028  memory: 268  
04/04 04:49:30 - mmengine - INFO - Epoch(test) [ 700/5000]    eta: 0:05:29  time: 0.0446  data_time: 0.0028  memory: 275  
04/04 04:49:32 - mmengine - INFO - Epoch(test) [ 750/5000]    eta: 0:05:16  time: 0.0430  data_time: 0.0031  memory: 268  
04/04 04:49:34 - mmengine - INFO - Epoch(test) [ 800/5000]    eta: 0:05:04  time: 0.0433  data_time: 0.0034  memory: 275  
04/04 04:49:37 - mmengine - INFO - Epoch(test) [ 850/5000]    eta: 0:04:53  time: 0.0432  data_time: 0.0033  memory: 271  
04/04 04:49:39 - mmengine - INFO - Epoch(test) [ 900/5000]    eta: 0:04:43  time: 0.0416  data_time: 0.0025  memory: 268  
04/04 04:49:41 - mmengine - INFO - Epoch(test) [ 950/5000]    eta: 0:04:34  time: 0.0444  data_time: 0.0029  memory: 265  
04/04 04:49:43 - mmengine - INFO - Epoch(test) [1000/5000]    eta: 0:04:26  time: 0.0424  data_time: 0.0027  memory: 268  
04/04 04:49:45 - mmengine - INFO - Epoch(test) [1050/5000]    eta: 0:04:18  time: 0.0442  data_time: 0.0030  memory: 271  
04/04 04:49:47 - mmengine - INFO - Epoch(test) [1100/5000]    eta: 0:04:11  time: 0.0448  data_time: 0.0035  memory: 275  
04/04 04:49:50 - mmengine - INFO - Epoch(test) [1150/5000]    eta: 0:04:06  time: 0.0487  data_time: 0.0034  memory: 265  
04/04 04:49:52 - mmengine - INFO - Epoch(test) [1200/5000]    eta: 0:03:59  time: 0.0429  data_time: 0.0034  memory: 276  
04/04 04:49:54 - mmengine - INFO - Epoch(test) [1250/5000]    eta: 0:03:53  time: 0.0413  data_time: 0.0035  memory: 268  
04/04 04:49:57 - mmengine - INFO - Epoch(test) [1300/5000]    eta: 0:03:48  time: 0.0500  data_time: 0.0044  memory: 275  
04/04 04:49:59 - mmengine - INFO - Epoch(test) [1350/5000]    eta: 0:03:43  time: 0.0482  data_time: 0.0041  memory: 275  
04/04 04:50:01 - mmengine - INFO - Epoch(test) [1400/5000]    eta: 0:03:38  time: 0.0467  data_time: 0.0036  memory: 271  
04/04 04:50:03 - mmengine - INFO - Epoch(test) [1450/5000]    eta: 0:03:33  time: 0.0430  data_time: 0.0039  memory: 275  
04/04 04:50:06 - mmengine - INFO - Epoch(test) [1500/5000]    eta: 0:03:28  time: 0.0412  data_time: 0.0031  memory: 265  
04/04 04:50:08 - mmengine - INFO - Epoch(test) [1550/5000]    eta: 0:03:23  time: 0.0436  data_time: 0.0031  memory: 275  
04/04 04:50:10 - mmengine - INFO - Epoch(test) [1600/5000]    eta: 0:03:18  time: 0.0432  data_time: 0.0038  memory: 271  
04/04 04:50:12 - mmengine - INFO - Epoch(test) [1650/5000]    eta: 0:03:14  time: 0.0424  data_time: 0.0037  memory: 275  
04/04 04:50:14 - mmengine - INFO - Epoch(test) [1700/5000]    eta: 0:03:10  time: 0.0455  data_time: 0.0033  memory: 268  
04/04 04:50:17 - mmengine - INFO - Epoch(test) [1750/5000]    eta: 0:03:06  time: 0.0493  data_time: 0.0036  memory: 275  
04/04 04:50:19 - mmengine - INFO - Epoch(test) [1800/5000]    eta: 0:03:02  time: 0.0467  data_time: 0.0038  memory: 268  
04/04 04:50:22 - mmengine - INFO - Epoch(test) [1850/5000]    eta: 0:02:59  time: 0.0542  data_time: 0.0052  memory: 275  
04/04 04:50:24 - mmengine - INFO - Epoch(test) [1900/5000]    eta: 0:02:55  time: 0.0486  data_time: 0.0040  memory: 275  
04/04 04:50:27 - mmengine - INFO - Epoch(test) [1950/5000]    eta: 0:02:52  time: 0.0479  data_time: 0.0038  memory: 275  
04/04 04:50:29 - mmengine - INFO - Epoch(test) [2000/5000]    eta: 0:02:48  time: 0.0486  data_time: 0.0045  memory: 275  
04/04 04:50:31 - mmengine - INFO - Epoch(test) [2050/5000]    eta: 0:02:45  time: 0.0429  data_time: 0.0032  memory: 260  
04/04 04:50:33 - mmengine - INFO - Epoch(test) [2100/5000]    eta: 0:02:41  time: 0.0420  data_time: 0.0033  memory: 271  
04/04 04:50:36 - mmengine - INFO - Epoch(test) [2150/5000]    eta: 0:02:37  time: 0.0439  data_time: 0.0035  memory: 268  
04/04 04:50:38 - mmengine - INFO - Epoch(test) [2200/5000]    eta: 0:02:34  time: 0.0416  data_time: 0.0029  memory: 268  
04/04 04:50:40 - mmengine - INFO - Epoch(test) [2250/5000]    eta: 0:02:30  time: 0.0446  data_time: 0.0040  memory: 271  
04/04 04:50:42 - mmengine - INFO - Epoch(test) [2300/5000]    eta: 0:02:27  time: 0.0481  data_time: 0.0041  memory: 256  
04/04 04:50:45 - mmengine - INFO - Epoch(test) [2350/5000]    eta: 0:02:25  time: 0.0614  data_time: 0.0065  memory: 268  
04/04 04:50:48 - mmengine - INFO - Epoch(test) [2400/5000]    eta: 0:02:22  time: 0.0451  data_time: 0.0044  memory: 271  
04/04 04:50:50 - mmengine - INFO - Epoch(test) [2450/5000]    eta: 0:02:18  time: 0.0414  data_time: 0.0032  memory: 271  
04/04 04:50:52 - mmengine - INFO - Epoch(test) [2500/5000]    eta: 0:02:15  time: 0.0429  data_time: 0.0028  memory: 275  
04/04 04:50:54 - mmengine - INFO - Epoch(test) [2550/5000]    eta: 0:02:12  time: 0.0422  data_time: 0.0028  memory: 271  
04/04 04:50:56 - mmengine - INFO - Epoch(test) [2600/5000]    eta: 0:02:08  time: 0.0426  data_time: 0.0029  memory: 275  
04/04 04:50:58 - mmengine - INFO - Epoch(test) [2650/5000]    eta: 0:02:05  time: 0.0384  data_time: 0.0025  memory: 268  
04/04 04:51:00 - mmengine - INFO - Epoch(test) [2700/5000]    eta: 0:02:02  time: 0.0414  data_time: 0.0030  memory: 275  
04/04 04:51:02 - mmengine - INFO - Epoch(test) [2750/5000]    eta: 0:01:59  time: 0.0424  data_time: 0.0029  memory: 275  
04/04 04:51:04 - mmengine - INFO - Epoch(test) [2800/5000]    eta: 0:01:56  time: 0.0431  data_time: 0.0038  memory: 275  
04/04 04:51:07 - mmengine - INFO - Epoch(test) [2850/5000]    eta: 0:01:53  time: 0.0455  data_time: 0.0039  memory: 268  
04/04 04:51:09 - mmengine - INFO - Epoch(test) [2900/5000]    eta: 0:01:50  time: 0.0480  data_time: 0.0035  memory: 275  
04/04 04:51:11 - mmengine - INFO - Epoch(test) [2950/5000]    eta: 0:01:47  time: 0.0446  data_time: 0.0040  memory: 275  
04/04 04:51:13 - mmengine - INFO - Epoch(test) [3000/5000]    eta: 0:01:44  time: 0.0400  data_time: 0.0031  memory: 271  
04/04 04:51:15 - mmengine - INFO - Epoch(test) [3050/5000]    eta: 0:01:41  time: 0.0404  data_time: 0.0026  memory: 275  
04/04 04:51:17 - mmengine - INFO - Epoch(test) [3100/5000]    eta: 0:01:38  time: 0.0394  data_time: 0.0025  memory: 275  
04/04 04:51:19 - mmengine - INFO - Epoch(test) [3150/5000]    eta: 0:01:35  time: 0.0408  data_time: 0.0028  memory: 268  
04/04 04:51:21 - mmengine - INFO - Epoch(test) [3200/5000]    eta: 0:01:32  time: 0.0398  data_time: 0.0025  memory: 275  
04/04 04:51:23 - mmengine - INFO - Epoch(test) [3250/5000]    eta: 0:01:29  time: 0.0392  data_time: 0.0025  memory: 256  
04/04 04:51:25 - mmengine - INFO - Epoch(test) [3300/5000]    eta: 0:01:26  time: 0.0413  data_time: 0.0027  memory: 275  
04/04 04:51:28 - mmengine - INFO - Epoch(test) [3350/5000]    eta: 0:01:24  time: 0.0556  data_time: 0.0064  memory: 275  
04/04 04:51:30 - mmengine - INFO - Epoch(test) [3400/5000]    eta: 0:01:21  time: 0.0456  data_time: 0.0042  memory: 268  
04/04 04:51:33 - mmengine - INFO - Epoch(test) [3450/5000]    eta: 0:01:19  time: 0.0443  data_time: 0.0037  memory: 275  
04/04 04:51:35 - mmengine - INFO - Epoch(test) [3500/5000]    eta: 0:01:16  time: 0.0487  data_time: 0.0041  memory: 275  
04/04 04:51:38 - mmengine - INFO - Epoch(test) [3550/5000]    eta: 0:01:13  time: 0.0504  data_time: 0.0041  memory: 271  
04/04 04:51:40 - mmengine - INFO - Epoch(test) [3600/5000]    eta: 0:01:11  time: 0.0486  data_time: 0.0040  memory: 271  
04/04 04:51:43 - mmengine - INFO - Epoch(test) [3650/5000]    eta: 0:01:08  time: 0.0516  data_time: 0.0048  memory: 275  
04/04 04:51:45 - mmengine - INFO - Epoch(test) [3700/5000]    eta: 0:01:06  time: 0.0503  data_time: 0.0052  memory: 256  
04/04 04:51:48 - mmengine - INFO - Epoch(test) [3750/5000]    eta: 0:01:03  time: 0.0516  data_time: 0.0064  memory: 268  
04/04 04:51:50 - mmengine - INFO - Epoch(test) [3800/5000]    eta: 0:01:01  time: 0.0443  data_time: 0.0039  memory: 271  
04/04 04:51:52 - mmengine - INFO - Epoch(test) [3850/5000]    eta: 0:00:58  time: 0.0452  data_time: 0.0038  memory: 275  
04/04 04:51:54 - mmengine - INFO - Epoch(test) [3900/5000]    eta: 0:00:55  time: 0.0451  data_time: 0.0037  memory: 268  
04/04 04:51:57 - mmengine - INFO - Epoch(test) [3950/5000]    eta: 0:00:53  time: 0.0457  data_time: 0.0031  memory: 265  
04/04 04:51:59 - mmengine - INFO - Epoch(test) [4000/5000]    eta: 0:00:50  time: 0.0443  data_time: 0.0035  memory: 260  
04/04 04:52:01 - mmengine - INFO - Epoch(test) [4050/5000]    eta: 0:00:47  time: 0.0452  data_time: 0.0034  memory: 271  
04/04 04:52:04 - mmengine - INFO - Epoch(test) [4100/5000]    eta: 0:00:45  time: 0.0491  data_time: 0.0034  memory: 275  
04/04 04:52:06 - mmengine - INFO - Epoch(test) [4150/5000]    eta: 0:00:42  time: 0.0444  data_time: 0.0034  memory: 260  
04/04 04:52:09 - mmengine - INFO - Epoch(test) [4200/5000]    eta: 0:00:40  time: 0.0540  data_time: 0.0044  memory: 265  
04/04 04:52:11 - mmengine - INFO - Epoch(test) [4250/5000]    eta: 0:00:37  time: 0.0483  data_time: 0.0042  memory: 275  
04/04 04:52:13 - mmengine - INFO - Epoch(test) [4300/5000]    eta: 0:00:35  time: 0.0469  data_time: 0.0034  memory: 265  
04/04 04:52:16 - mmengine - INFO - Epoch(test) [4350/5000]    eta: 0:00:32  time: 0.0454  data_time: 0.0032  memory: 275  
04/04 04:52:18 - mmengine - INFO - Epoch(test) [4400/5000]    eta: 0:00:30  time: 0.0453  data_time: 0.0033  memory: 268  
04/04 04:52:20 - mmengine - INFO - Epoch(test) [4450/5000]    eta: 0:00:27  time: 0.0488  data_time: 0.0036  memory: 268  
04/04 04:52:23 - mmengine - INFO - Epoch(test) [4500/5000]    eta: 0:00:25  time: 0.0458  data_time: 0.0040  memory: 271  
04/04 04:52:25 - mmengine - INFO - Epoch(test) [4550/5000]    eta: 0:00:22  time: 0.0464  data_time: 0.0039  memory: 275  
04/04 04:52:27 - mmengine - INFO - Epoch(test) [4600/5000]    eta: 0:00:20  time: 0.0460  data_time: 0.0041  memory: 268  
04/04 04:52:30 - mmengine - INFO - Epoch(test) [4650/5000]    eta: 0:00:17  time: 0.0454  data_time: 0.0041  memory: 257  
04/04 04:52:32 - mmengine - INFO - Epoch(test) [4700/5000]    eta: 0:00:15  time: 0.0498  data_time: 0.0044  memory: 271  
04/04 04:52:34 - mmengine - INFO - Epoch(test) [4750/5000]    eta: 0:00:12  time: 0.0477  data_time: 0.0033  memory: 268  
04/04 04:52:37 - mmengine - INFO - Epoch(test) [4800/5000]    eta: 0:00:10  time: 0.0447  data_time: 0.0033  memory: 275  
04/04 04:52:39 - mmengine - INFO - Epoch(test) [4850/5000]    eta: 0:00:07  time: 0.0471  data_time: 0.0034  memory: 275  
04/04 04:52:42 - mmengine - INFO - Epoch(test) [4900/5000]    eta: 0:00:05  time: 0.0526  data_time: 0.0040  memory: 271  
04/04 04:52:44 - mmengine - INFO - Epoch(test) [4950/5000]    eta: 0:00:02  time: 0.0459  data_time: 0.0035  memory: 275  
04/04 04:52:46 - mmengine - INFO - Epoch(test) [5000/5000]    eta: 0:00:00  time: 0.0453  data_time: 0.0039  memory: 275  
04/04 04:52:57 - mmengine - INFO - Evaluating bbox...
Loading and preparing results...
DONE (t=2.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=48.51s).
Accumulating evaluation results...
DONE (t=15.22s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.356
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.547
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.377
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.197
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.390
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.478
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.533
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.533
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.533
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.340
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.699
04/04 04:54:07 - mmengine - INFO - bbox_mAP_copypaste: 0.356 0.547 0.377 0.197 0.390 0.478
04/04 04:54:11 - mmengine - INFO - Epoch(test) [5000/5000]    coco/bbox_mAP: 0.3560  coco/bbox_mAP_50: 0.5470  coco/bbox_mAP_75: 0.3770  coco/bbox_mAP_s: 0.1970  coco/bbox_mAP_m: 0.3900  coco/bbox_mAP_l: 0.4780  data_time: 0.0037  time: 0.0499
[CS470] End Time: 2024.04.04 13:54:11 (KST)
[CS470] Takes 0:05:53
